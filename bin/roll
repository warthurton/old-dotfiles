#!/usr/bin/env ruby
#------------------------------------------------------------------------------
# $Id: $
#------------------------------------------------------------------------------
# Author:                   chorn _at_ chorn.com
# Licensed under GNU GPLv2: http://www.gnu.org/licenses/gpl.txt
#------------------------------------------------------------------------------

require 'optparse'
require 'pp'
require 'stringio'

#---------------------------------------------------------------------
def EvaluateExpression(spec)
  rtn = ""
  sets, iterations, die, modifier, drop, reroll, totals = 1, 1, 20, 0, false, false, false

  if spec =~ /([+-]\d+)$/
    modifier = $&.to_i
    spec = spec.sub(/([+-]\d+)$/, '')
  end

  if spec =~ /[rR]$/
    reroll = true
    spec = spec.sub(/[rR]$/, '')
  end

  if spec =~ /^(\d+)[xX]/
    sets = $&.to_i
    spec = spec.sub(/^(\d+)[xX]/, '')
  else if spec =~ /[xX](\d+)$/
         sets = $&.to_i
         spec = spec.sub(/[xX](\d+)$/, '')
       end
  end

  if spec =~ /^(\d+)$/
    iterations = 1
    die = $&.to_i
  end

  drop = true if spec =~ /D/

  if spec =~ /d/
    (str_iterations, str_die) = spec.split(/[dD]/) 
    iterations = str_iterations.to_i
    die = str_die.to_i
  end


  iterations = 1 if iterations < 1 or iterations > 30
  die = 20       if die < 1 or die > 1000000000
  sets = 6       if sets < 1 or sets > 40
  drop = false   if iterations == 1

  width = die.to_s.length

  1.upto(sets) {
    scores = []
    lowest = die
    total = 0
    shown = 0
  
    1.upto(iterations) {
      if reroll and (die != 1)
        rand_num = 1
        rand_num = Kernel.rand(die)+1 while rand_num == 1
      else
        rand_num = Kernel.rand(die)+1
      end

      lowest = rand_num if rand_num < lowest
      scores.push rand_num
    }

    rtn += iterations.to_s + "d" + die.to_s
    rtn += "r" if reroll

    if modifier != 0
      rtn += "+" if modifier > 0
      rtn += "-" if modifier < 0
      rtn += modifier.abs.to_s
    end

    rtn += ": "

    scores.each { |score|
      shown += 1
      rtn += " + " if shown > 1 and !totals

      if (score == lowest) and drop
        rtn += sprintf("[%" + width + "s]", score) if !totals

        lowest = -1
      else
        if !totals and (iterations > 1)
          rtn += " " if drop
          rtn += sprintf("%" + width.to_s + "s", score)
          rtn += " " if drop
        end

        total += score
      end
    }

    rtn += " = " if !totals and iterations > 1

    if (modifier != 0)
      if !totals
        rtn += sprintf("%" + (width+1).to_s + "s ", total)
        rtn += '+' if modifier > 0
        rtn += '-' if modifier < 0
        rtn += " " + modifier.abs.to_s + " = "
      end

      total += modifier
    end

    rtn += sprintf("%" + (width+1).to_s + "s\n", total)
  }

  return rtn
end

#---------------------------------------------------------------------

ARGV.each { |exp| puts EvaluateExpression(exp) }

